import os
import re
import logging
import base64
import aiohttp
import asyncio
import json
from aiohttp import web
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
# –£–±—Ä–∞–ª–∏ –∏–º–ø–æ—Ä—Ç OpenAI, —Ç–∞–∫ –∫–∞–∫ –∞–Ω–∞–ª–∏–∑ —Ç–µ–ø–µ—Ä—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from zoneinfo import ZoneInfo
from datetime import datetime
import pytz  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ requirements –µ—Å—Ç—å pytz

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
ALMATY_TZ = pytz.timezone("Asia/Almaty")

TIMEZONE = "Asia/Almaty"
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –≤ .env —Ñ–∞–π–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://127.0.0.1:5000)
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:5000")
BOT_SECRET_TOKEN = os.getenv("BOT_SECRET_TOKEN") # –î–ª—è –≤–µ–±—Ö—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –£–±—Ä–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
app_token = os.getenv("TELEGRAM_BOT_TOKEN")

os.makedirs("temp_photos", exist_ok=True)

# --- –ò–ó–ú–ï–ù–ï–ù–û: –£–ø—Ä–æ—Å—Ç–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
(ASK_CODE, SELECT_MENU, ASK_PHOTO, HANDLE_SAVE, OVERWRITE_CONFIRM, HISTORY_MENU, ACTIVITY_INPUT) = range(7)


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–ø–ª–∏—Ç–∫–∏ 2√ó2) ---
MAIN_MENU_KEYBOARD = [
    [InlineKeyboardButton("üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ", callback_data="menu_nutrition"),
     InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="menu_training")],
    [InlineKeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_progress"),
     InlineKeyboardButton("‚öôÔ∏è –ï—â—ë", callback_data="menu_more")],
]
# --- –ü–æ–¥–º–µ–Ω—é ---
NUTRITION_MENU_KEYBOARD = [
    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", callback_data="add")],
    [InlineKeyboardButton("üçΩÔ∏è –ü—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_meals")],
    [InlineKeyboardButton("ü•ó –¢–µ–∫—É—â–∞—è –¥–∏–µ—Ç–∞", callback_data="current")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
]

TRAININGS_MENU_KEYBOARD = [
    [InlineKeyboardButton("üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_trainings")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
]

PROGRESS_MENU_KEYBOARD = [
    [InlineKeyboardButton("üöÄ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
    [InlineKeyboardButton("üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="history")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
]

MORE_MENU_KEYBOARD = [
    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="add_activity")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
]



# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def cleanup_chat(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.user_data.get('chat_id')
    messages_to_delete = context.user_data.pop('messages_to_delete', [])

    main_menu_msg_id = context.user_data.pop('main_menu_message_id', None)
    if main_menu_msg_id:
        messages_to_delete.append(main_menu_msg_id)

    if not chat_id or not messages_to_delete:
        return

    for msg_id in set(messages_to_delete):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception:
            pass

def remember_msg(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç message_id –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏, –±–µ–∑ –¥—É–±–ª–µ–π."""
    lst = context.user_data.setdefault('messages_to_delete', [])
    if message_id not in lst:
        lst.append(message_id)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_chat(context)
    text = "üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    reply_markup = InlineKeyboardMarkup(MAIN_MENU_KEYBOARD)
    chat = update.effective_chat
    sent_message = await chat.send_message(text, reply_markup=reply_markup)
    context.user_data['main_menu_message_id'] = sent_message.message_id
    context.user_data['messages_to_delete'] = []  # –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏


async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SELECT_MENU."""
    query = update.callback_query
    if query:
        await query.answer()
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        try:
            await query.message.delete()
        except Exception as e:
            logging.warning(f"Could not delete message on back_to_main_menu: {e}")


    await show_main_menu(update, context)
    return SELECT_MENU


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ telegram_bot.py
async def open_menu_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ –ª—é–±–æ–º—É —Ç–µ–∫—Å—Ç—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.
       –í —à–∞–≥–∞—Ö –≤–≤–æ–¥–∞ –∫–æ–¥–∞/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (—Å–º. –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –Ω–∏–∂–µ)."""
    chat_id = update.effective_chat.id
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Telegram
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/is_registered/{chat_id}") as resp:
                if resp.status == 200:
                    await show_main_menu(update, context)
                    return SELECT_MENU
                else:
                    sent = await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:")
                    remember_msg(context, sent.message_id)
                    return ASK_CODE
    except aiohttp.ClientError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def show_today_meals(update_or_query: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –±—ç–∫–µ–Ω–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
    chat = update_or_query.effective_chat
    chat_id = chat.id
    loading_msg = await chat.send_message("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/meals/today/{chat_id}") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    meals = data.get("meals")
                    total_calories = data.get("total_calories")

                    if not meals:
                        text = "ü§∑‚Äç‚ôÇÔ∏è –í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è."
                    else:
                        text = "üçΩÔ∏è *–í–∞—à–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
                        meal_type_map = {
                            'breakfast': 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫',
                            'lunch': 'üçõ –û–±–µ–¥',
                            'dinner': 'üç≤ –£–∂–∏–Ω',
                            'snack': 'ü•ú –ü–µ—Ä–µ–∫—É—Å'
                        }
                        for meal in meals:
                            meal_name = meal.get('name')
                            meal_calories = meal.get('calories')
                            meal_type_rus = meal_type_map.get(meal.get('meal_type'), '–ü—Ä–∏–µ–º –ø–∏—â–∏')
                            text += f"*{meal_type_rus}*: {meal_name} - *{meal_calories} –∫–∫–∞–ª*\n"

                        text += f"\nüî• *–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª*"

                    await loading_msg.edit_text(
                        text,
                        parse_mode="Markdown",
                        reply_markup=InlineKeyboardMarkup(
                            [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]]
                        )
                    )
                    remember_msg(context, loading_msg.message_id)

                else:
                    await loading_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    except aiohttp.ClientError as e:
        logging.error(f"Today's meals loading failed: {e}")
        await loading_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")

# ‚Äî‚Äî‚Äî –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–û–í ‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['chat_id'] = update.effective_chat.id
    context.user_data['messages_to_delete'] = [update.message.message_id]

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{BACKEND_URL}/api/is_registered/{update.effective_chat.id}") as resp:
                if resp.status == 200:
                    await show_main_menu(update, context)
                    return SELECT_MENU
                else:
                    sent_message = await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:")
                    context.user_data.setdefault('messages_to_delete', []).append(sent_message.message_id)
                    return ASK_CODE
        except aiohttp.ClientError as e:
            logging.error(f"Cannot connect to backend: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END


async def verify_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault('messages_to_delete', []).append(update.message.message_id)
    code = update.message.text.strip()
    chat_id = update.effective_chat.id
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(f"{BACKEND_URL}/api/link_telegram", json={"code": code, "chat_id": chat_id}) as resp:
                if resp.status == 200:
                    await cleanup_chat(context)
                    await update.message.reply_text("‚úÖ Telegram –ø—Ä–∏–≤—è–∑–∞–Ω! –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
                    return ConversationHandler.END
                else:
                    sent_message = await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    context.user_data.setdefault('messages_to_delete', []).append(sent_message.message_id)
                    return ASK_CODE
        except aiohttp.ClientError as e:
            logging.error(f"Cannot connect to backend: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

async def my_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    chat_id = str(chat.id)
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/api/trainings/my", params={"chat_id": chat_id}) as resp:
            if resp.status != 200:
                await chat.send_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            data = await resp.json()
            items = data.get("items", [])
            if not items:
                await chat.send_message("üèãÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
                return

            lines = []
            for it in items:
                # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ISO –≤—Ä–µ–º—è –∫ –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–º—É
                dt = None
                if it.get("start_time"):
                    try:
                        # parse ISO ‚Üí utc ‚Üí local
                        dt_utc = datetime.fromisoformat(it["start_time"].replace("Z", "+00:00"))
                        dt = dt_utc.astimezone(ALMATY_TZ)
                    except Exception:
                        dt = None

                when = dt.strftime("%d.%m %H:%M") if dt else "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                title = it.get("title") or "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
                location = it.get("location")
                if location:
                    lines.append(f"‚Ä¢ {when} ‚Äî {title} ({location})")
                else:
                    lines.append(f"‚Ä¢ {when} ‚Äî {title}")

            text = "üèãÔ∏è *–ú–æ–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n" + "\n".join(lines)
            msg = await chat.send_message(text, parse_mode="Markdown")
            remember_msg(context, msg.message_id)

async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    chat = update.effective_chat
    chat_id = chat.id
    last_menu_id = context.user_data.pop('main_menu_message_id', None)
    if last_menu_id:
        try:
            await context.bot.delete_message(chat_id=chat.id, message_id=last_menu_id)
        except Exception as e:
            logging.warning(f"Could not delete previous main menu ({last_menu_id}): {e}")
    # –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # --- –ü–ª–∏—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é -> –ø–æ–¥–º–µ–Ω—é ---
    if data == "menu_nutrition":
        sent = await chat.send_message(
            "üçΩÔ∏è –†–∞–∑–¥–µ–ª *–ü–∏—Ç–∞–Ω–∏–µ* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(NUTRITION_MENU_KEYBOARD)
        )
        remember_msg(context, sent.message_id)
        return SELECT_MENU

    if data == "menu_training":
        sent = await chat.send_message(
            "üèãÔ∏è –†–∞–∑–¥–µ–ª *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(TRAININGS_MENU_KEYBOARD)
        )
        remember_msg(context, sent.message_id)
        return SELECT_MENU

    if data == "menu_progress":
        sent = await chat.send_message(
            "üìà –†–∞–∑–¥–µ–ª *–ü—Ä–æ–≥—Ä–µ—Å—Å*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(PROGRESS_MENU_KEYBOARD)
        )
        remember_msg(context, sent.message_id)
        return SELECT_MENU

    if data == "menu_more":
        sent = await chat.send_message(
            "‚öôÔ∏è –†–∞–∑–¥–µ–ª *–ï—â—ë*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(MORE_MENU_KEYBOARD)
        )
        remember_msg(context, sent.message_id)
        return SELECT_MENU

    if data == "add":
        keyboard = [
            [InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="meal_breakfast"),
             InlineKeyboardButton("üçõ –û–±–µ–¥", callback_data="meal_lunch")],
            [InlineKeyboardButton("üç≤ –£–∂–∏–Ω", callback_data="meal_dinner"),
             InlineKeyboardButton("ü•ú –ü–µ—Ä–µ–∫—É—Å", callback_data="meal_snack")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        sent_message = await chat.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        remember_msg(context, sent_message.message_id)  # ‚Üê –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∏—Ä–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
        return ASK_PHOTO

    if data == "today_meals":
        await show_today_meals(update, context)  # ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º update
        return SELECT_MENU

    if data == "add_activity":
        return await show_activity_prompt(update, context)

    if data == "progress":
        await show_progress(update, context)      # ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º update
        return SELECT_MENU

    if data == "history":
        return await show_history_menu(update, context)

    if data == "current":
        loading_msg = await chat.send_message("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É –¥–∏–µ—Ç—É...")  # ‚Üê –≤ —á–∞—Ç
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{BACKEND_URL}/api/current_diet/{chat_id}") as resp:
                    if resp.status == 200:
                        diet = await resp.json()
                        text = f"ü•ó *–í–∞—à–∞ –¥–∏–µ—Ç–∞ –Ω–∞ {diet['date']}*\n\n"
                        for meal_type, meal_name in [("breakfast", "–ó–∞–≤—Ç—Ä–∞–∫"), ("lunch", "–û–±–µ–¥"), ("dinner", "–£–∂–∏–Ω"), ("snack", "–ü–µ—Ä–µ–∫—É—Å")]:
                            text += f"*{meal_name}*:\n"
                            items = diet.get(meal_type)
                            if items:
                                for item in items:
                                    text += f"- {item['name']} ({item['grams']}–≥, {item['kcal']} –∫–∫–∞–ª)\n"
                            else:
                                text += "- –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                            text += "\n"
                        text += (f"–ò—Ç–æ–≥–æ: *{diet['total_kcal']} –∫–∫–∞–ª* (–ë: {diet['protein']}–≥, "
                                 f"–ñ: {diet['fat']}–≥, –£: {diet['carbs']}–≥)")
                        await loading_msg.edit_text(text, parse_mode="Markdown")
                        remember_msg(context, loading_msg.message_id)
                    elif resp.status == 404:
                        await loading_msg.edit_text("ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∏–µ—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.")
                    else:
                        await loading_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–µ—Ç—ã.")
        except aiohttp.ClientError as e:
            logging.error(f"Diet loading failed: {e}")
            await loading_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–µ—Ç—É.")

        await show_main_menu(update, context)
        return SELECT_MENU

    if data == "my_trainings":
        await my_trainings(update, context)
        await show_main_menu(update, context)
        return SELECT_MENU

    await show_main_menu(update, context)
    return SELECT_MENU



async def ask_photo_for_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_main":
        await query.message.delete()
        return await back_to_main_menu(update, context)

    context.user_data["meal_type"] = query.data.split('_')[1]
    await query.edit_message_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã:", reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    ))
    return ASK_PHOTO # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∂–¥–µ–º —Ñ–æ—Ç–æ


# --- –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥ ---
async def process_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault('messages_to_delete', []).append(update.message.message_id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    if context.user_data.get('messages_to_delete'):
        old_message_id = context.user_data['messages_to_delete'][0]
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=old_message_id)
            context.user_data['messages_to_delete'].pop(0)
        except Exception:
            pass

    analyzing_msg = await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...")
    await update.effective_chat.send_chat_action('typing')

    file_id = update.message.photo[-1].file_id
    try:
        photo_file = await context.bot.get_file(file_id)
        photo_bytes = await photo_file.download_as_bytearray()

        form_data = aiohttp.FormData()
        form_data.add_field('file', photo_bytes, filename='meal.jpg', content_type='image/jpeg')
        form_data.add_field('chat_id', str(update.effective_chat.id))

        async with aiohttp.ClientSession() as session:
            # NEW: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            async with session.get(f"{BACKEND_URL}/api/subscription/status",
                                   params={"chat_id": str(update.effective_chat.id)}) as s:
                if s.status == 200:
                    sub = await s.json()
                    if not sub.get("has_subscription"):
                        await analyzing_msg.delete()
                        await update.message.reply_text(
                            "üîí –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                            "‚úçÔ∏è –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:\n"
                            "¬´–≥—Ä–µ—á–∫–∞ 150 –≥, –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 120 –≥, —Å–∞–ª–∞—Ç 80 –≥¬ª."
                        )
                        await show_main_menu(update, context)
                        return SELECT_MENU
                else:
                    # –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–µ –ø—É—Å–∫–∞–µ–º –∫ –ø–ª–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    await analyzing_msg.delete()
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—ë–º –ø–∏—â–∏ –≤—Ä—É—á–Ω—É—é."
                    )
                    await show_main_menu(update, context)
                    return SELECT_MENU

            async with session.post(f"{BACKEND_URL}/analyze_meal_photo", data=form_data) as resp:
                await analyzing_msg.delete()
                if resp.status == 200:
                    result_data = await resp.json()
                    context.user_data["analysis_result"] = result_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å JSON

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    text = (f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:*\n\n"
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{result_data.get('name', 'N/A')}*\n"
                            f"–í–µ—Ä–¥–∏–∫—Ç: *{result_data.get('verdict', 'N/A')}*\n\n"
                            f"–ö–∞–ª–æ—Ä–∏–∏: *{result_data.get('calories', 0)} –∫–∫–∞–ª*\n"
                            f"–ë–µ–ª–∫–∏: {result_data.get('protein', 0.0)} –≥\n"
                            f"–ñ–∏—Ä—ã: {result_data.get('fat', 0.0)} –≥\n"
                            f"–£–≥–ª–µ–≤–æ–¥—ã: {result_data.get('carbs', 0.0)} –≥\n\n"
                            f"_{result_data.get('analysis', '')}_")

                    kb = [[InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_yes"),
                           InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="save_no")]]
                    result_msg = await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="Markdown")
                    context.user_data['messages_to_delete'].append(result_msg.message_id)
                    return HANDLE_SAVE
                else:
                    error_text = await resp.text()
                    logging.error(f"Backend photo analysis failed: {resp.status} - {error_text}")
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ–∑–∂–µ.")
                    await show_main_menu(update, context)
                    return SELECT_MENU

    except Exception as e:
        logging.error(f"Failed to process photo: {e}")
        await analyzing_msg.delete()
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_PHOTO


async def handle_save_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "save_no":
        await query.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await show_main_menu(update, context)
        return SELECT_MENU

    # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ API –±—ç–∫–µ–Ω–¥–∞
    chat_id = update.effective_chat.id
    meal_type = context.user_data.get("meal_type")
    analysis_result = context.user_data.get("analysis_result")

    if not meal_type or not analysis_result:
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await show_main_menu(update, context)
        return SELECT_MENU

    payload = {
        "chat_id": chat_id,
        "meal_type": meal_type,
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        **analysis_result
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(f"{BACKEND_URL}/api/log_meal", json=payload) as resp:
                if resp.status == 200:
                    await query.message.edit_text("‚úÖ –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                    await show_main_menu(update, context)
                    return SELECT_MENU
                elif resp.status == 409: # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    kb = [[InlineKeyboardButton("–î–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data="overwrite_yes"),
                           InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="overwrite_no")]]
                    await query.message.edit_text(f"ü•£ –ü—Ä–∏—ë–º –ø–∏—â–∏ '{meal_type}' –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?",
                                                  reply_markup=InlineKeyboardMarkup(kb))
                    return OVERWRITE_CONFIRM
                else:
                    error_text = await resp.text()
                    logging.error(f"Backend save failed: {resp.status} - {error_text}")
                    await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
                    await show_main_menu(update, context)
                    return SELECT_MENU
        except aiohttp.ClientError as e:
            logging.error(f"Save failed (network): {e}")
            await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            await show_main_menu(update, context)
            return SELECT_MENU


async def handle_overwrite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "overwrite_no":
        await query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await show_main_menu(update, context)
        return SELECT_MENU

    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏: —Å–Ω–∞—á–∞–ª–∞ DELETE, –ø–æ—Ç–æ–º POST
    chat_id = update.effective_chat.id
    meal_type = context.user_data.get("meal_type")
    analysis_result = context.user_data.get("analysis_result")

    payload = {"chat_id": chat_id, "meal_type": meal_type}
    save_payload = {"chat_id": chat_id, "meal_type": meal_type, **analysis_result}

    try:
        async with aiohttp.ClientSession() as session:
            # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
            async with session.delete(f"{BACKEND_URL}/api/log_meal", json=payload) as del_resp:
                if del_resp.status not in [200, 204, 404]: # 404 —Ç–æ–∂–µ –æ–∫, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—ë —É–∂–µ —É–¥–∞–ª–∏–ª–∏
                     await query.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                     await show_main_menu(update, context)
                     return SELECT_MENU

            # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            async with session.post(f"{BACKEND_URL}/api/log_meal", json=save_payload) as post_resp:
                if post_resp.status == 200:
                    await query.message.edit_text("üîÑ –ü—Ä–∏—ë–º –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
                else:
                    await query.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è.")

    except aiohttp.ClientError as e:
        logging.error(f"Overwrite failed (network): {e}")
        await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.")

    await show_main_menu(update, context)
    return SELECT_MENU


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_chat(context)
    if update.message:
        await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif update.callback_query:
        await update.callback_query.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await show_main_menu(update, context)
    context.user_data.clear()
    return await back_to_main_menu(update, context)


# --- –§–£–ù–ö–¶–ò–ò –ü–†–û–ì–†–ï–°–°–ê –ò –ò–°–¢–û–†–ò–ò ---
async def show_progress(update_or_query: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update_or_query.effective_chat
    chat_id = chat.id
    loading_msg = await chat.send_message("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{BACKEND_URL}/api/user_progress/{chat_id}") as resp:
                if resp.status != 200:
                    data = await resp.json()
                    error_msg = data.get("error", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
                    await loading_msg.edit_text(f"‚ö†Ô∏è {error_msg}")
                    return
                data = await resp.json()
        except aiohttp.ClientError as e:
            logging.error(f"Progress loading failed: {e}")
            await loading_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")
            return

    await loading_msg.delete()
    latest = data.get("latest")
    previous = data.get("previous")

    if not latest:
        await chat.send_message(
            "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
        return

    text = f"üöÄ *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å (–∑–∞–º–µ—Ä –æ—Ç {latest['date']})*\n\n"
    text += f"‚öñÔ∏è –í–µ—Å: *{latest.get('weight', 'N/A')} –∫–≥*\n"
    text += f"üßà –ñ–∏—Ä–æ–≤–∞—è –º–∞—Å—Å–∞: *{latest.get('fat_mass', 'N/A')} –∫–≥*\n"
    text += f"üí™ –ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞: *{latest.get('muscle_mass', 'N/A')} –∫–≥*\n"

    if previous:
        def get_diff_str(latest_val, prev_val):
            if latest_val is None or prev_val is None: return "‚Äì –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            diff = latest_val - prev_val
            if diff > 0.01: return f"üî∫ +{diff:.1f}"
            if diff < -0.01: return f"‚úÖ {diff:.1f}"
            return "‚Äì –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

        text += f"\n*–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–º–µ—Ä–∞ ({previous['date']})*:\n"
        text += f"‚öñÔ∏è –í–µ—Å: {get_diff_str(latest.get('weight'), previous.get('weight'))}\n"
        text += f"üßà –ñ–∏—Ä: {get_diff_str(latest.get('fat_mass'), previous.get('fat_mass'))}\n"
        text += f"üí™ –ú—ã—à—Ü—ã: {get_diff_str(latest.get('muscle_mass'), previous.get('muscle_mass'))}"

    msg = await chat.send_message(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
    )
    remember_msg(context, msg.message_id)


async def show_history_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è", callback_data="history_meals_1")],
        [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="history_activity_1")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    text = "üìú –ö–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º effective_chat –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat = update.effective_chat
    if query and query.message:
        try:
            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–µ–Ω—é, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.delete()
        except Exception: pass

    sent_message = await chat.send_message(text, reply_markup=InlineKeyboardMarkup(keyboard))
    remember_msg(context, sent_message.message_id)
    return HISTORY_MENU


async def handle_history_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id

    try:
        _, history_type, page_str = query.data.split("_")
        page = int(page_str)
    except (ValueError, IndexError):
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return HISTORY_MENU

    api_endpoint = "meal_history" if history_type == "meals" else "activity_history"
    title = "–ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è" if history_type == "meals" else "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/{api_endpoint}/{chat_id}?page={page}") as resp:
                if resp.status != 200:
                    await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
                    return HISTORY_MENU
                data = await resp.json()
    except aiohttp.ClientError as e:
        logging.error(f"History loading failed: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")
        return HISTORY_MENU

    text = f"üìú *{title} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page})*\n\n"
    days = data.get("days", [])
    if not days:
        text += "–ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ."
    else:
        for day in days:
            if history_type == "meals":
                text += f"*{day['date']}*: {day['total_calories']} –∫–∫–∞–ª ({day['meal_count']} –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏)\n"
            else:
                text += f"*{day['date']}*: {day['steps']} —à–∞–≥–æ–≤, {day['active_kcal']} –∫–∫–∞–ª\n"

    nav_buttons = []
    if data.get("has_prev"):
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_{history_type}_{page - 1}"))
    if data.get("has_next"):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"history_{history_type}_{page + 1}"))

    keyboard_layout = [
        nav_buttons,
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—Ä–∏–∏", callback_data="back_to_history")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard_layout), parse_mode="Markdown")
    # —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ, id –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ‚Äî –º–æ–∂–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å
    return HISTORY_MENU


# --- (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: scheduler, webhook, check_meals, error_handler) ---
async def remind_missing_meals(app: Application):
    """–í 21:00 (Asia/Almaty): –µ—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–µ–¥—ã ‚Äî —à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ c –∫–Ω–æ–ø–∫–∞–º–∏."""
    logging.info("Running scheduled job: evening reminders")

    # —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–π —Ç–∞–π–º–∑–æ–Ω–µ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å API –∏—Å—Ç–æ—Ä–∏–∏)
    today_local_str = datetime.now(ZoneInfo(TIMEZONE)).strftime("%d.%m.%Y")

    try:
        async with aiohttp.ClientSession() as session:
            # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            async with session.get(f"{BACKEND_URL}/api/registered_chats") as resp:
                if resp.status != 200:
                    logging.warning("registered_chats failed")
                    return
                reg = await resp.json()
                chat_ids = reg.get("chat_ids", [])

            for chat_id in chat_ids:
                # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è ---
                meals_missing = True
                try:
                    async with session.get(f"{BACKEND_URL}/api/meals/today/{chat_id}") as r_meal:
                        if r_meal.status == 200:
                            d = await r_meal.json()
                            total = d.get("total_calories", 0) or 0
                            meals_missing = (total == 0)
                except Exception as e:
                    logging.warning(f"meals check failed for {chat_id}: {e}")

                # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ---
                activity_missing = True
                try:
                    # –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª /api/activity/today
                    async with session.get(f"{BACKEND_URL}/api/activity/today/{chat_id}") as r_act:
                        if r_act.status == 200:
                            a = await r_act.json()
                            activity_missing = (not a.get("present"))
                        else:
                            # fallback —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é
                            async with session.get(f"{BACKEND_URL}/api/activity_history/{chat_id}?page=1") as r_hist:
                                if r_hist.status == 200:
                                    h = await r_hist.json()
                                    days = h.get("days", [])
                                    if days and days[0].get("date") == today_local_str:
                                        activity_missing = False
                except Exception as e:
                    logging.warning(f"activity check failed for {chat_id}: {e}")

                # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏ —à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
                if meals_missing or activity_missing:
                    parts = ["üåô *–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*"]
                    if meals_missing:
                        parts.append("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞.")
                    if activity_missing:
                        parts.append("üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–∫–∞–∂–∏—Ç–µ *–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏* –∏ *—à–∞–≥–∏*.")

                    text = "\n\n".join(parts)
                    kb = []

                    if activity_missing:
                        kb.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="add_activity")])
                    if meals_missing:
                        kb.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", callback_data="add")])

                    try:
                        await app.bot.send_message(
                            chat_id=chat_id,
                            text=text + "\n\nüìå –≠—Ç–æ –∑–∞–π–º—ë—Ç –º–∏–Ω—É—Ç—É ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–æ—á–Ω–µ–µ —Å—á–∏—Ç–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç üí™",
                            parse_mode="Markdown",
                            reply_markup=InlineKeyboardMarkup(kb) if kb else None
                        )
                    except Exception as e:
                        logging.warning(f"send reminder failed {chat_id}: {e}")

    except Exception as e:
        logging.error(f"evening reminders error: {e}")

async def show_activity_prompt(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∫–∫–∞–ª –∏ —à–∞–≥–∏)."""
    if hasattr(update_or_query, "callback_query") and update_or_query.callback_query:
        q = update_or_query.callback_query
        await q.answer()
        chat = update_or_query.effective_chat
        try:
            await q.message.delete()
        except Exception:
            pass
        msg = await chat.send_message(
            "üìù –í–≤–µ–¥–∏—Ç–µ *–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏* –∏ *—à–∞–≥–∏* –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ `450 8200`\n‚Ä¢ `–∫–∫–∞–ª 520, —à–∞–≥–∏ 9000`\n\n"
            "_–ú–æ–∂–Ω–æ –ª—é–±—ã–º –ø–æ—Ä—è–¥–∫–æ–º, —è —Å–∞–º —Ä–∞–∑–±–µ—Ä—É._",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
    else:
        chat = update_or_query.effective_chat
        msg = await chat.send_message(
            "üìù –í–≤–µ–¥–∏—Ç–µ *–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏* –∏ *—à–∞–≥–∏* –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ `450 8200`\n‚Ä¢ `–∫–∫–∞–ª 520, —à–∞–≥–∏ 9000`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
    remember_msg(context, msg.message_id)
    return ACTIVITY_INPUT


async def handle_activity_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞—Ä—Å–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∫–∞–ª –∏ —à–∞–≥–∏) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥."""
    text = (update.message.text or "").replace(",", " ")
    nums = re.findall(r"\d+", text)
    if len(nums) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù—É–∂–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞: –∫–∫–∞–ª –∏ —à–∞–≥–∏. –ü—Ä–∏–º–µ—Ä: `480 9500`",
            parse_mode="Markdown"
        )
        return ACTIVITY_INPUT

    # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ —Å—á–∏—Ç–∞–µ–º —à–∞–≥–∞–º–∏
    a, b = int(nums[0]), int(nums[1])
    active_kcal, steps = (a, b) if a < b else (b, a)

    loading = await update.message.reply_text("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...")
    payload = {"chat_id": update.effective_chat.id, "active_kcal": active_kcal, "steps": steps}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BACKEND_URL}/api/activity/log", json=payload) as resp:
                if resp.status == 200:
                    await loading.edit_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{active_kcal}* –∫–∫–∞–ª, *{steps}* —à–∞–≥–æ–≤.",
                                            parse_mode="Markdown")
                else:
                    err = await resp.text()
                    logging.error(f"activity save failed: {resp.status} - {err}")
                    await loading.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except aiohttp.ClientError as e:
        logging.error(f"activity save network error: {e}")
        await loading.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await show_main_menu(update, context)
    return SELECT_MENU


async def on_startup(app: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥, –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    await app.bot.set_my_commands([
        ("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é")
    ])
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 21:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê–ª–º–∞—Ç—ã
    scheduler.add_job(remind_missing_meals, 'cron', hour=21, minute=11, args=[app])
    scheduler.start()
    logging.info("APScheduler started.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏."""
    logging.error(f"Update {update} caused error {context.error}")


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main():
    application = Application.builder().token(app_token).post_init(on_startup).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, open_menu_from_text),
            CallbackQueryHandler(handle_menu_selection,
                                 pattern=r"^(menu_nutrition|menu_training|menu_progress|menu_more|add|add_activity|today_meals|progress|history|current|my_trainings)$"),
            CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$"),
        ],

        states={
            ASK_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, verify_code)],
            SELECT_MENU: [
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$"),
                CallbackQueryHandler(handle_menu_selection),
            ],
            ACTIVITY_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_activity_input),
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$")
            ],
            ASK_PHOTO: [
                CallbackQueryHandler(ask_photo_for_meal, pattern=r"^meal_"),
                MessageHandler(filters.PHOTO, process_photo),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∑–¥–µ—Å—å
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$")
            ],
            HANDLE_SAVE: [CallbackQueryHandler(handle_save_confirmation, pattern=r"^save_")],
            OVERWRITE_CONFIRM: [CallbackQueryHandler(handle_overwrite, pattern=r"^overwrite_")],
            HISTORY_MENU: [
                CallbackQueryHandler(handle_history_pagination, pattern=r"^history_"),
                CallbackQueryHandler(show_history_menu, pattern=r"^back_to_history$"),
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("my_trainings", my_trainings))
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == "__main__":
    main()