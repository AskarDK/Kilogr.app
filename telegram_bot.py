import os
import re
import logging
import base64
import aiohttp
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from openai import AsyncOpenAI
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import date

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

TIMEZONE = "Asia/Almaty"
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:5000")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Async OpenAI –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
app_token = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
os.makedirs("temp_photos", exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
ASK_CODE, SELECT_MENU, ASK_PHOTO, ASK_COMMENT, ANALYZE_FOOD, HANDLE_SAVE, OVERWRITE_CONFIRM = range(7)


# ‚Äî‚Äî‚Äî HANDLERS ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    chat_id = update.effective_chat.id
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/api/is_registered/{chat_id}") as resp:
            if resp.status == 200:
                keyboard = [
                    [InlineKeyboardButton("üì∑ –û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—Ü–∏–π", callback_data="estimate")],
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", callback_data="add")],
                    [InlineKeyboardButton("ü•ó –¢–µ–∫—É—â–∞—è –¥–∏–µ—Ç–∞", callback_data="current")]
                ]
                await update.message.reply_text(
                    "üëã –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return SELECT_MENU
            else:
                await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:")
                return ASK_CODE

async def verify_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    chat_id = update.effective_chat.id
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"{BACKEND_URL}/api/link_telegram",
            json={"code": code, "chat_id": chat_id}
        ) as resp:
            if resp.status == 200:
                await update.message.reply_text("‚úÖ Telegram –ø—Ä–∏–≤—è–∑–∞–Ω! –í–≤–µ–¥–∏—Ç–µ /start.")
                return ConversationHandler.END
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return ASK_CODE

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "estimate":
        context.user_data["mode"] = "estimate"
        await query.edit_message_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ä—Ü–∏–π:")
        return ASK_COMMENT

    if data == "add":
        context.user_data["mode"] = "add"
        keyboard = [
            [InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="breakfast")],
            [InlineKeyboardButton("üçõ –û–±–µ–¥", callback_data="lunch")],
            [InlineKeyboardButton("üç≤ –£–∂–∏–Ω", callback_data="dinner")],
            [InlineKeyboardButton("ü•ú –ü–µ—Ä–µ–∫—É—Å", callback_data="snack")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_PHOTO

    if data == "current":
        await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â—É—é –¥–∏–µ—Ç—É...")
        chat_id = query.message.chat.id
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/current_diet/{chat_id}") as resp:
                if resp.status != 200:
                    await query.message.reply_text("‚ö†Ô∏è –î–∏–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return SELECT_MENU
                diet = await resp.json()

        def fmt(meal, items):
            lines = [f"üç± {meal}:"]
            for i in items:
                lines.append(f"- {i['name']} ({i['grams']} –≥, {i['kcal']} –∫–∫–∞–ª)")
            return "\n".join(lines)

        msg = (
            f"üìÖ –î–∞—Ç–∞: {diet['date']}\n\n"
            f"{fmt('–ó–∞–≤—Ç—Ä–∞–∫',  diet['breakfast'])}\n\n"
            f"{fmt('–û–±–µ–¥',     diet['lunch'])}\n\n"
            f"{fmt('–£–∂–∏–Ω',     diet['dinner'])}\n\n"
            f"{fmt('–ü–µ—Ä–µ–∫—É—Å',  diet['snack'])}\n\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {diet['total_kcal']} –∫–∫–∞–ª\n"
            f"üçó –ë–µ–ª–∫–∏: {diet['protein']} –≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {diet['fat']} –≥\n"
            f"ü•î –£–≥–ª–µ–≤–æ–¥—ã: {diet['carbs']} –≥"
        )
        await query.message.reply_text(msg)
        return SELECT_MENU

    return await start(update, context)

async def ask_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "back":
        return await start(update, context)

    context.user_data["meal_type"] = query.data
    await query.edit_message_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã:")
    return ASK_COMMENT

async def ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return ASK_COMMENT

    file_id = update.message.photo[-1].file_id
    try:
        photo_file = await context.bot.get_file(file_id)
        path = f"temp_photos/{update.effective_user.id}_{file_id}.jpg"
        await photo_file.download_to_drive(path)
        context.user_data["photo_path"] = path
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_COMMENT

    await update.message.reply_text("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –ø–æ—Ä—Ü–∏–∏):")
    return ANALYZE_FOOD

async def analyze_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_comment = update.message.text.strip()
    photo_path = context.user_data.get("photo_path")
    meal_type = context.user_data.get("meal_type", "–ø—Ä–∏—ë–º –ø–∏—â–∏")
    mode = context.user_data.get("mode")

    messages = [{
        "role": "system",
        "content": (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. "
            "–¶–∏—Ñ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏, –±–µ–∑ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ —á–µ—Ä–µ–∑ –¥–∏—Ñ–∏—Å –≤—Ä–æ–¥–µ 45-50. –í–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ö–∞–ª–æ—Ä–∏–∏: X –∫–∫–∞–ª\n–ë–µ–ª–∫–∏: X –≥\n–ñ–∏—Ä—ã: X –≥\n–£–≥–ª–µ–≤–æ–¥—ã: X –≥\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ..."
        )
    }]

    if photo_path:
        with open(photo_path, "rb") as f:
            b64 = base64.b64encode(f.read()).decode()
        messages.append({
            "role": "user",
            "content": [
                {"type": "text", "text": f"{'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ' if mode == 'add' else '–û—Ü–µ–Ω–∫–∞'}: {user_comment}"},
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{b64}"}}
            ]
        })
    else:
        messages.append({"role": "user", "content": user_comment})

    try:
        resp = await client.chat.completions.create(model="gpt-4o", messages=messages, max_tokens=500)
        result = resp.choices[0].message.content.strip()
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await start(update, context)

    if mode == "estimate":
        await update.message.reply_text(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:\n\n{result}")
        return await start(update, context)

    context.user_data["analysis_result"] = result
    kb = [[
        InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="save_no")
    ]]
    await update.message.reply_text(
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ({meal_type}):\n\n{result}",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return HANDLE_SAVE

async def handle_save_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    mode = context.user_data.get("mode")
    chat_id = query.message.chat.id

    if "photo_path" in context.user_data:
        try:
            os.remove(context.user_data["photo_path"])
        except:
            pass

    if query.data == "save_no":
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return await start(update, context)

    if mode == "add":
        analysis = context.user_data["analysis_result"]
        meal_type = context.user_data["meal_type"]

        calm = re.search(r'–ö–∞–ª–æ—Ä–∏–∏[:\s]+(\d+)', analysis)
        prot = re.search(r'–ë–µ–ª–∫–∏[:\s]+([\d.]+)', analysis)
        fatm = re.search(r'–ñ–∏—Ä—ã[:\s]+([\d.]+)', analysis)
        carb = re.search(r'–£–≥–ª–µ–≤–æ–¥—ã[:\s]+([\d.]+)', analysis)

        if not (calm and prot and fatm and carb):
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–ª–æ—Ä–∏–∏ –∏–ª–∏ –ë–ñ–£. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return await start(update, context)

        payload = {
            "chat_id": chat_id,
            "meal_type": meal_type,
            "analysis": analysis,
            "calories": int(calm.group(1)),
            "protein": float(prot.group(1)),
            "fat": float(fatm.group(1)),
            "carbs": float(carb.group(1)),
        }

        async with aiohttp.ClientSession() as session:
            resp = await session.post(f"{BACKEND_URL}/api/log_meal", json=payload)
            if resp.status == 409:
                kb = [[
                    InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data="overwrite_yes"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="overwrite_no")
                ]]
                await query.edit_message_text(
                    "‚ö†Ô∏è –ü—Ä–∏—ë–º –ø–∏—â–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å–µ–≥–æ–¥–Ω—è. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?",
                    reply_markup=InlineKeyboardMarkup(kb)
                )
                return OVERWRITE_CONFIRM
            if resp.status == 200:
                await query.edit_message_text("‚úÖ –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            else:
                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await start(update, context)

    await query.edit_message_text("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    return await start(update, context)

async def handle_overwrite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "overwrite_no":
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return await start(update, context)

    chat_id = query.message.chat.id
    analysis = context.user_data["analysis_result"]
    meal_type = context.user_data["meal_type"]

    calm = re.search(r'–ö–∞–ª–æ—Ä–∏–∏[:\s]+(\d+)', analysis)
    prot = re.search(r'–ë–µ–ª–∫–∏[:\s]+([\d.]+)', analysis)
    fatm = re.search(r'–ñ–∏—Ä—ã[:\s]+([\d.]+)', analysis)
    carb = re.search(r'–£–≥–ª–µ–≤–æ–¥—ã[:\s]+([\d.]+)', analysis)

    async with aiohttp.ClientSession() as session:
        await session.delete(
            f"{BACKEND_URL}/api/log_meal",
            json={"chat_id": chat_id, "meal_type": meal_type}
        )
        await session.post(
            f"{BACKEND_URL}/api/log_meal",
            json={
                "chat_id": chat_id,
                "meal_type": meal_type,
                "analysis": analysis,
                "calories": int(calm.group(1)),
                "protein": float(prot.group(1)),
                "fat": float(fatm.group(1)),
                "carbs": float(carb.group(1)),
            }
        )
    await query.edit_message_text("üîÑ –ü—Ä–∏—ë–º –ø–∏—â–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start.")
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error("Exception in handler", exc_info=context.error)
    if update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ‚Äî‚Äî‚Äî REMINDER & SCHEDULER ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def remind_missing_meals(app):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏ –≤ 21:00."""
    bot = app.bot
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/api/registered_chats") as resp:
            if resp.status != 200:
                return
            data = await resp.json()
            chat_ids = data.get("chat_ids", [])

        for chat_id in chat_ids:
            async with session.get(f"{BACKEND_URL}/api/meals/today/{chat_id}") as r2:
                if r2.status != 200:
                    continue
                meals = await r2.json()
                logged = {m['meal_type'] for m in meals}

            missing = [m for m in ("breakfast", "lunch", "dinner") if m not in logged]
            if not missing:
                continue

            names = {"breakfast": "–ó–∞–≤—Ç—Ä–∞–∫", "lunch": "–û–±–µ–¥", "dinner": "–£–∂–∏–Ω"}
            text = "üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏*\n–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è:\n"
            for m in missing:
                text += f"‚Äì {names[m]}\n"
            text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ /start –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö."

            try:
                await bot.send_message(chat_id=int(chat_id), text=text, parse_mode="Markdown")
            except:
                pass

async def on_startup(app):
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(remind_missing_meals, trigger='cron', hour=21, minute=0, args=[app])
    scheduler.start()
    logging.info("üïò –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: app.bot_data["scheduler"] = scheduler

# ‚Äî‚Äî‚Äî NEW CHECK COMMAND HANDLER ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def check_meals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manually trigger the meal reminder check."""
    chat_id = update.message.chat.id
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{BACKEND_URL}/api/meals/today/{chat_id}") as r2:
            if r2.status != 200:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏.")
                return
            meals = await r2.json()
            logged = {m['meal_type'] for m in meals}

        missing = [m for m in ("breakfast", "lunch", "dinner") if m not in logged]
        if not missing:
            await update.message.reply_text("‚úÖ –í—Å–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            return

        names = {"breakfast": "–ó–∞–≤—Ç—Ä–∞–∫", "lunch": "–û–±–µ–¥", "dinner": "–£–∂–∏–Ω"}
        text = "üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏*\n–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è:\n"
        for m in missing:
            text += f"‚Äì {names[m]}\n"
        text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ /start –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö."

        try:
            await update.message.reply_text(text, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"Error sending check reminder: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

# ‚Äî‚Äî‚Äî RUN BOT ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def run_bot():
    application = Application.builder() \
        .token(app_token) \
        .post_init(on_startup) \
        .build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    application.add_handler(CommandHandler("check", check_meals))

    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_CODE:          [MessageHandler(filters.TEXT & ~filters.COMMAND, verify_code)],
            SELECT_MENU:       [CallbackQueryHandler(handle_menu)],
            ASK_PHOTO:         [CallbackQueryHandler(ask_photo)],
            ASK_COMMENT:       [MessageHandler(filters.PHOTO, ask_comment)],
            ANALYZE_FOOD:      [MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_food)],
            HANDLE_SAVE:       [CallbackQueryHandler(handle_save_confirmation)],
            OVERWRITE_CONFIRM: [CallbackQueryHandler(handle_overwrite)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler
    application.add_handler(conv)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    run_bot()
